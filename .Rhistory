trans  = "log10",
breaks = 10^(1:10),
labels = comma_format()
) +
scale_y_continuous(breaks=10*(1:10))
library(scales)
p_scales +
scale_x_log10(labels=dollar_format)) +
library(scales)
p_scales +
scale_x_log10(labels=dollar_format) +
scale_colour_continuous(
trans  = "log10",
breaks = 10^(1:10),
labels = comma_format()
) +
scale_y_continuous(breaks=10*(1:10))
library(scales)
p_scales +
scale_x_log10(labels=dollar_format) +
scale_colour_continuous(
trans  = "log10",
breaks = 10^(1:10),
labels = comma_format()
) +
scale_y_continuous(breaks=10*(1:10))
p_scales +
scale_x_log10() +
scale_colour_continuous(
trans  = "log10",
breaks = 10^(1-10)) +
scale_y_continuous(breaks=1:10 * 10)
library(scales)
p_scales +
scale_x_log10(labels=dollar_format) +
scale_colour_continuous(
trans  = "log10",
breaks = 10^(1:10),
labels = comma_format()
) +
scale_y_continuous(breaks=10*(1:10))
colours
colors
library(scales)
p_scales +
scale_x_log10(labels=dollar_format) +
scale_colour_continuous(
trans  = "log10",
breaks = 10^(1:10),
labels = comma_format()
) +
scale_y_continuous(breaks=10*(1:10))
## All palettes the come with RColorBrewer:
install.packages("Rcolorbrewer")
## All palettes the come with RColorBrewer:
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
load(RColorBrewer)
## All palettes the come with RColorBrewer:
install.packages("RColorBrewer")
RColorBrewer::display.brewer.all()
install.packages("RColorBrewer")
library(gapminder)
install.packages("RColorBrewer")
suppressPackageStartupMessages(library(tidyverse))
library(gapminder)
## All palettes the come with RColorBrewer:
install.packages("RColorBrewer")
load("RColorBrewer")
install.packages("RColorBrewer")
library("RColorBrewer", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(scales)
load("RColorBrewer")
library("RColorBrewer")
## All palettes the come with RColorBrewer:
install.packages("RColorBrewer")
library("RColorBrewer")
RColorBrewer::display.brewer.all()
p_scales +
scale_x_log10(labels=dollar_format()) +
scale_colour_distiller(
trans   = "log10",
breaks  = 10^(1:10),
labels  = comma_format(),
palette = "Greens"
) +
scale_y_continuous(breaks=10*(1:10))
p_scales +
scale_x_log10(labels=dollar_format()) +
scale_colour_viridis_c(
trans   = "log10",
breaks  = 10^(1:10),
labels  = comma_format()
) +
scale_y_continuous(breaks=10*(1:10))
p_scales +
scale_x_log10(labels=dollar_format()) +
scale_colour_viridis_d(
trans   = "log10",
breaks  = 10^(1:10),
labels  = comma_format()
) +
scale_y_continuous(breaks=10*(1:10))
p_scales +
scale_x_log10(labels=dollar_format()) +
scale_colour_viridis_c(
trans   = "log10",
breaks  = 10^(1:10),
labels  = comma_format()
) +
scale_y_continuous(breaks=10*(1:10))
## All palettes the come with RColorBrewer:
install.packages("RColorBrewer")
library("RColorBrewer")
RColorBrewer::display.brewer.all()
p_scales +
scale_x_log10(labels=dollar_format()) +
scale_colour_distiller(
trans   = "log10",
breaks  = 10^(1:10),
labels  = comma_format(),
palette = "Blues"
) +
scale_y_continuous(breaks=10*(1:10))
## All palettes the come with RColorBrewer:
install.packages("RColorBrewer")
library("RColorBrewer")
RColorBrewer::display.brewer.all()
p_scales +
scale_x_log10(labels=dollar_format()) +
scale_colour_distiller(
trans   = "log10",
breaks  = 10^(1:10),
labels  = comma_format(),
palette = "Accent"
) +
scale_y_continuous(breaks=10*(1:10))
ggplot(iris, aes(Sepal.Width, Sepal.Length)) +
facet_wrap(~ Species) +
geom_point() +
labs(x = "Sepal Width",
y = "Sepal Length",
title = "Sepal sizes of three plant species")
ggplot(iris, aes(Sepal.Width, Sepal.Length)) +
facet_wrap(~ Species) +
geom_point() +
labs(x = "Sepal Width",
y = "Sepal Length",
title = "Sepal sizes of three plant species") +
theme_bw()
ggplot(iris, aes(Sepal.Width, Sepal.Length)) +
facet_wrap(~ Species) +
geom_point() +
labs(x = "Sepal Width",
y = "Sepal Length",
title = "Sepal sizes of three plant species") +
theme_classic()
ggplot(iris, aes(Sepal.Width, Sepal.Length)) +
facet_wrap(~ Species) +
geom_point() +
labs(x = "Sepal Width",
y = "Sepal Length",
title = "Sepal sizes of three plant species") +
theme_bw()
ggplot(iris, aes(Sepal.Width, Sepal.Length)) +
facet_wrap(~ Species) +
geom_point() +
labs(x = "Sepal Width",
y = "Sepal Length",
title = "Sepal sizes of three plant species") +
theme_bw() + #new theme layer
theme(axis.text = element_text(),
strip.background = white)
ggplot(iris, aes(Sepal.Width, Sepal.Length)) +
facet_wrap(~ Species) +
geom_point() +
labs(x = "Sepal Width",
y = "Sepal Length",
title = "Sepal sizes of three plant species") +
theme_bw() + #new theme layer
theme(axis.text = element_text(size=16),
strip.background = element_rect(fill = "orange"))
ggplot(iris, aes(Sepal.Width, Sepal.Length)) +
facet_wrap(~ Species) +
geom_point() +
labs(x = "Sepal Width",
y = "Sepal Length",
title = "Sepal sizes of three plant species") +
theme_bw() + #new theme layer
theme(axis.text = element_text(size=16),
strip.background = element_rect(fill = "yellow"))
ggplot(iris, aes(Sepal.Width, Sepal.Length)) +
facet_wrap(~ Species) +
geom_point() +
labs(x = "Sepal Width",
y = "Sepal Length",
title = "Sepal sizes of three plant species") +
theme_bw() + #new theme layer
theme(axis.text = element_text(size=16),
strip.background = element_rect(fill = "yellow"),
panel.element =element_rect(fill= "blue"))
ggplot(iris, aes(Sepal.Width, Sepal.Length)) +
facet_wrap(~ Species) +
geom_point() +
labs(x = "Sepal Width",
y = "Sepal Length",
title = "Sepal sizes of three plant species") +
theme_bw() + #new theme layer
theme(axis.text = element_text(size=16),
strip.background = element_rect(fill = "yellow"),
panel.background = element_rect(fill= "blue"))
(p <- gapminder %>%
filter(continent != "Oceania") %>%
ggplot(aes(gdpPercap, lifeExp)) +
geom_point(aes(colour=pop), alpha=0.2) +
scale_x_log10(labels=dollar_format()) +
scale_colour_distiller(
trans   = "log10",
breaks  = 10^(1:10),
labels  = comma_format(),
palette = "Greens"
) +
facet_wrap(~ continent) +
scale_y_continuous(breaks=10*(1:10)) +
theme_bw())
install.packages(plotly)
ggplotly(p)
library(plotly)
install.packages("plotly")
library(plotly)
ggplotly(p)
plot_ly(gapminder,
x = ~gdpPercap,
y = ~lifeExp,
type = "scatter",
mode = "markers",
opacity = 0.2) %>%
layout(xaxis = list(type = "log"))
plot_ly(gapminder,
x = ~gdpPercap,
y = ~lifeExp,
z = ~pop,
type = "scatter3d",
mode = "markers",
opacity = 0.2)
library(scales)
p_scales +
scale_x_log10(labels=dollar_format) +
scale_colour_continuous(
trans  = "log10",
breaks = 10^(1:10),
labels = comma_format()
) +
scale_y_continuous(breaks=10*(1:10))
library(scales)
#p_scales +
scale_x_log10(labels=dollar_format) +
scale_colour_continuous(
trans  = "log10",
breaks = 10^(1:10),
labels = comma_format()
) +
scale_y_continuous(breaks=10*(1:10))
library(scales)
#p_scales +
# scale_x_log10(labels=dollar_format) +
scale_colour_continuous(
trans  = "log10",
breaks = 10^(1:10),
labels = comma_format()
) +
scale_y_continuous(breaks=10*(1:10))
library(scales)
#p_scales +
# scale_x_log10(labels=dollar_format) +
# scale_colour_continuous(
trans  = "log10",
library(scales)
#p_scales +
# scale_x_log10(labels=dollar_format) +
# scale_colour_continuous(
#   trans  = "log10",
breaks = 10^(1:10),
library(scales)
#p_scales +
# scale_x_log10(labels=dollar_format) +
# scale_colour_continuous(
#   trans  = "log10",
# breaks = 10^(1:10),
# labels = comma_format()
#   ) +
# scale_y_continuous(breaks=10*(1:10))
#see his online...
## All palettes the come with RColorBrewer:
install.packages("RColorBrewer")
library("RColorBrewer")
RColorBrewer::display.brewer.all()
p_scales +
scale_x_log10(labels=dollar_format()) +
scale_colour_distiller(
trans   = "log10",
breaks  = 10^(1:10),
labels  = comma_format(),
palette = "Accent"
) +
scale_y_continuous(breaks=10*(1:10))
suppressPackageStartupMessages(library(tidyverse))
library(gapminder)
library(broom)
install.packages("broom")
install.packages("broom")
suppressPackageStartupMessages(library(tidyverse))
library(gapminder)
library(broom)
library(tidyverse)
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
labs(x = "Weight (1000's of lbs)")
ggplot(mtcars, aes(qsec, drat)) +
geom_point() +
labs(x = "Quarter mile time",
y = "Rear axle ratio")
(my_lm <- lm(life expectancy ~ log(GDP per capita), data=gapminder))
(my_lm <- lm(life expectancy ~ log(GDP per capita), data=gapminder))
(my_lm <- lm(lifeExp ~ log(gdpPercap), data=gapminder))
summary(my_lm) %>%
names()
predict(my_lm) %>%
head()
(my_lm <- lm(lifeExp ~ log(gdpPercap), data=gapminder))
unlcass(my_lm)
unclass(my_lm)
names(my_lm) #see what names of list components are
my_lm$coefficients
predict(my_lm) %>%
head()
ggplot(gapminder, aes(gdpPercap, lifeExp)) +
geom_point() +
geom_smooth(method="lm") +
scale_x_log10()
tibble(gdpPercap = c(500, 600, 700)
tibble(gdpPercap = c(500, 600, 700)
tibble(gdpPercap = c(500, 600, 700)
g
tibble(gdpPercap = c(500, 600, 700)
f
tibble(gdpPercap = c(500, 600, 700)
predict(my_lm) %>%
predict(my_lm) %>%
head()
predict(my_lm, newdata = tibble(gdpPercap = c(500, 600, 700)))
#tibble cretes a new data frame
ggplot(gapminder, aes(gdpPercap, lifeExp)) +
geom_point() +
geom_smooth(method="lm") +
scale_x_log10()
tidy(my_lm)
tidy(my_lm)
augment(my_lm)
glance(my_lm)
augment(my_lm, new data=tibble(gdpPercap=c(400, 500, 600))) #binds new columnds onto the original data frame #we can specify new data here
tidy(my_lm)
augment(my_lm, newdata=tibble(gdpPercap=c(400, 500, 600))) #binds new columnds onto the original data frame #we can specify new data here
glance(my_lm)
library(testthat)
install.packages(testthat)
install.packages("testthat")
library(gapminder)
library(tidyverse)
library(testthat)
square <- function(x) x^2
square(10)
square <- function(x) {
y <- x^2
y
}
square(10)
square <- function(x) {
y <- x^2
return(y) #r will stop what it's doing and return y
}
square(10)
square <- function(x) {
y <- x^2
return(y) #r will stop what it's doing and return y
5
}
square(10)
?min
?max
max(gapminder$lifeExp) - min(gapminder$lifeExp)
?min
max_minus_min <- function(x) {
(gapminder$lifeExp) - min(gapminder$lifeExp)
}
max_minus_min <- function(x) {
max(x) - min(x)
}
max-minus_min(gapminder$lifeExp)
max_minus_min(gapminder$lifeExp)
max_minus_min(1:10)
max-Minus_min(runif(100))
max_Minus_min(runif(100))
max_Minus_min(runif(100))
max_minus_min(runif(100))
test_that("Simple cases work", {
expect_equal(max_minus_min(1:10), 9)
FILL_THIS_IN
})
expect_lt(max_minus_min(runif(100)), 1)
test_that("Simple cases work", {
expect_equal(max_minus_min(1:10), 9)
expect_lt(max_minus_min(runif(100)), 1)
})
expect_lt(max_minus_min(runif(100)), 1)
test_that("Simple cases work", {
expect_equal(max_minus_min(1:10), 9)
expect_lt(max_minus_min(runif(100)), 1)
})
max_minus_min(numeric(0))
max_minus_min(gapminder)
stopifnot(FALSE)
stopifnot(FALSE)
stop("Here's my little error message.")
mmm1 <- function(x) {
stopifnot(!is.numeric(x))
stop("Stopped because it is not numeric.")
max(x) - min(x)
}
mmm1(TRUE)
mmm1("hello")
mmm1("hello")
mmm2 <- function(x) {
if (!is.numeric(x)) {
stop(paste("Expecting x to be numeric. You gave me "), typeof(x))
}
max(x) - min(x)
}
mmm2((numeric(0)))
mmm2(gapminder)
mmm2(gapminder$country)
mmm2(gapminder[c('lifeExp', 'gdpPercap', 'pop')])
mmm2(c(TRUE, TRUE, FALSE, TRUE, TRUE))
mmm2(x)
mmm2(x)
x <- 1:10
mmm2(x)
qd <- function(x, probs) {
stopifnot(is.numeric(x))
if (length(x) == 0) {
warning("You inputted a length-0 x. Expecting length >=1. Returning NULL.")
return(NULL)
}
qvec <- quantile(x, probs)
max(qvec) - min(qvec)
}
x <- runif(100)
qd(x, c(0.25, 0.75))
IQR(x)
qd(x, c(0.25, 0.75)) #differnce between .25 and .75 quantiles
IQR(x)
qd(x, c(0,1))
mmm2(x)
mmm2(x)
qd2 <- function(x, probs=c(0,1)) { #defailt value on probs, also same as quantile names
stopifnot(is.numeric(x))
if (length(x) == 0) {
warning("You inputted a length-0 x. Expecting length >=1. Returning NULL.")
return(NULL)
}
qvec <- quantile(x, probs)
max(qvec) - min(qvec)
}
qd2(rnorm(100))
qd2(rnorm(100), probs =c(.25, .75))
v <- c(1:10, NA)
qd(v)
qd2(v)
?ellipses
?ellipses
?ellipses
qd2(v, probs=c(0,1), na.rm=TRUE, type=1) #going to assume youre talking about the 2nd argument... it'll match 1 up with the 4th argument (ellipses)
qd2(v, probs=c(0,1), na.rm=TRUE, type=1) #going to assume youre talking about the 2nd argument... it'll match 1 up with the 4th argument (ellipses)
v <- rnorm(100)
qd2(v, probs=c(0,1), na.rm=TRUE, type=1) #going to assume youre talking about the 2nd argument... it'll match 1 up with the 4th argument (ellipses)
qd2 <- function(x, probs=c(0,1), na.rm=FALSE, ...) { #... whatever goes there, will be taken and put into the quantile function below
stopifnot(is.numeric(x))
if (length(x) == 0) {
warning("You inputted a length-0 x. Expecting length >=1. Returning NULL.")
return(NULL)
}
qvec <- quantile(x, probs, na.rm = na.rm, ...)
max(qvec) - min(qvec)
}
v <- rnorm(100)
qd2(v, probs=c(0,1), na.rm=TRUE, type=1) #going to assume youre talking about the 2nd argument... it'll match 1 up with the 4th argument (ellipses)
fox <- str_subset(sentences, pattern="fox")
suppressPackageStartupMessages(library(tidyverse))
library(gapminder)
library(testthat)
fox <- str_subset(sentences, pattern="fox")
fox <- str_subset(sentences, pattern="fox")
fox <- str_subset(sentences, pattern="fox")
install.packages(testthat)
install.packages("testthat")
suppressPackageStartupMessages(library(tidyverse))
library(gapminder)
library(testthat)
fox <- str_subset(sentences, pattern="fox")
fox <- str_subset(sentences, pattern="fox")
fox <- str_subset(sentences, pattern="fox")
