geom_point() +
labs(x = "Sepal Width",
y = "Sepal Length",
title = "Sepal sizes of three plant species") +
theme_bw() + #new theme layer
theme(axis.text = element_text(size=16),
strip.background = element_rect(fill = "yellow"),
panel.element =element_rect(fill= "blue"))
ggplot(iris, aes(Sepal.Width, Sepal.Length)) +
facet_wrap(~ Species) +
geom_point() +
labs(x = "Sepal Width",
y = "Sepal Length",
title = "Sepal sizes of three plant species") +
theme_bw() + #new theme layer
theme(axis.text = element_text(size=16),
strip.background = element_rect(fill = "yellow"),
panel.background = element_rect(fill= "blue"))
(p <- gapminder %>%
filter(continent != "Oceania") %>%
ggplot(aes(gdpPercap, lifeExp)) +
geom_point(aes(colour=pop), alpha=0.2) +
scale_x_log10(labels=dollar_format()) +
scale_colour_distiller(
trans   = "log10",
breaks  = 10^(1:10),
labels  = comma_format(),
palette = "Greens"
) +
facet_wrap(~ continent) +
scale_y_continuous(breaks=10*(1:10)) +
theme_bw())
install.packages(plotly)
ggplotly(p)
library(plotly)
install.packages("plotly")
library(plotly)
ggplotly(p)
plot_ly(gapminder,
x = ~gdpPercap,
y = ~lifeExp,
type = "scatter",
mode = "markers",
opacity = 0.2) %>%
layout(xaxis = list(type = "log"))
plot_ly(gapminder,
x = ~gdpPercap,
y = ~lifeExp,
z = ~pop,
type = "scatter3d",
mode = "markers",
opacity = 0.2)
library(scales)
p_scales +
scale_x_log10(labels=dollar_format) +
scale_colour_continuous(
trans  = "log10",
breaks = 10^(1:10),
labels = comma_format()
) +
scale_y_continuous(breaks=10*(1:10))
library(scales)
#p_scales +
scale_x_log10(labels=dollar_format) +
scale_colour_continuous(
trans  = "log10",
breaks = 10^(1:10),
labels = comma_format()
) +
scale_y_continuous(breaks=10*(1:10))
library(scales)
#p_scales +
# scale_x_log10(labels=dollar_format) +
scale_colour_continuous(
trans  = "log10",
breaks = 10^(1:10),
labels = comma_format()
) +
scale_y_continuous(breaks=10*(1:10))
library(scales)
#p_scales +
# scale_x_log10(labels=dollar_format) +
# scale_colour_continuous(
trans  = "log10",
library(scales)
#p_scales +
# scale_x_log10(labels=dollar_format) +
# scale_colour_continuous(
#   trans  = "log10",
breaks = 10^(1:10),
library(scales)
#p_scales +
# scale_x_log10(labels=dollar_format) +
# scale_colour_continuous(
#   trans  = "log10",
# breaks = 10^(1:10),
# labels = comma_format()
#   ) +
# scale_y_continuous(breaks=10*(1:10))
#see his online...
## All palettes the come with RColorBrewer:
install.packages("RColorBrewer")
library("RColorBrewer")
RColorBrewer::display.brewer.all()
p_scales +
scale_x_log10(labels=dollar_format()) +
scale_colour_distiller(
trans   = "log10",
breaks  = 10^(1:10),
labels  = comma_format(),
palette = "Accent"
) +
scale_y_continuous(breaks=10*(1:10))
suppressPackageStartupMessages(library(tidyverse))
library(gapminder)
library(broom)
install.packages("broom")
install.packages("broom")
suppressPackageStartupMessages(library(tidyverse))
library(gapminder)
library(broom)
library(tidyverse)
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
labs(x = "Weight (1000's of lbs)")
ggplot(mtcars, aes(qsec, drat)) +
geom_point() +
labs(x = "Quarter mile time",
y = "Rear axle ratio")
(my_lm <- lm(life expectancy ~ log(GDP per capita), data=gapminder))
(my_lm <- lm(life expectancy ~ log(GDP per capita), data=gapminder))
(my_lm <- lm(lifeExp ~ log(gdpPercap), data=gapminder))
summary(my_lm) %>%
names()
predict(my_lm) %>%
head()
(my_lm <- lm(lifeExp ~ log(gdpPercap), data=gapminder))
unlcass(my_lm)
unclass(my_lm)
names(my_lm) #see what names of list components are
my_lm$coefficients
predict(my_lm) %>%
head()
ggplot(gapminder, aes(gdpPercap, lifeExp)) +
geom_point() +
geom_smooth(method="lm") +
scale_x_log10()
tibble(gdpPercap = c(500, 600, 700)
tibble(gdpPercap = c(500, 600, 700)
tibble(gdpPercap = c(500, 600, 700)
g
tibble(gdpPercap = c(500, 600, 700)
f
tibble(gdpPercap = c(500, 600, 700)
predict(my_lm) %>%
predict(my_lm) %>%
head()
predict(my_lm, newdata = tibble(gdpPercap = c(500, 600, 700)))
#tibble cretes a new data frame
ggplot(gapminder, aes(gdpPercap, lifeExp)) +
geom_point() +
geom_smooth(method="lm") +
scale_x_log10()
tidy(my_lm)
tidy(my_lm)
augment(my_lm)
glance(my_lm)
augment(my_lm, new data=tibble(gdpPercap=c(400, 500, 600))) #binds new columnds onto the original data frame #we can specify new data here
tidy(my_lm)
augment(my_lm, newdata=tibble(gdpPercap=c(400, 500, 600))) #binds new columnds onto the original data frame #we can specify new data here
glance(my_lm)
library(testthat)
install.packages(testthat)
install.packages("testthat")
library(gapminder)
library(tidyverse)
library(testthat)
square <- function(x) x^2
square(10)
square <- function(x) {
y <- x^2
y
}
square(10)
square <- function(x) {
y <- x^2
return(y) #r will stop what it's doing and return y
}
square(10)
square <- function(x) {
y <- x^2
return(y) #r will stop what it's doing and return y
5
}
square(10)
?min
?max
max(gapminder$lifeExp) - min(gapminder$lifeExp)
?min
max_minus_min <- function(x) {
(gapminder$lifeExp) - min(gapminder$lifeExp)
}
max_minus_min <- function(x) {
max(x) - min(x)
}
max-minus_min(gapminder$lifeExp)
max_minus_min(gapminder$lifeExp)
max_minus_min(1:10)
max-Minus_min(runif(100))
max_Minus_min(runif(100))
max_Minus_min(runif(100))
max_minus_min(runif(100))
test_that("Simple cases work", {
expect_equal(max_minus_min(1:10), 9)
FILL_THIS_IN
})
expect_lt(max_minus_min(runif(100)), 1)
test_that("Simple cases work", {
expect_equal(max_minus_min(1:10), 9)
expect_lt(max_minus_min(runif(100)), 1)
})
expect_lt(max_minus_min(runif(100)), 1)
test_that("Simple cases work", {
expect_equal(max_minus_min(1:10), 9)
expect_lt(max_minus_min(runif(100)), 1)
})
max_minus_min(numeric(0))
max_minus_min(gapminder)
stopifnot(FALSE)
stopifnot(FALSE)
stop("Here's my little error message.")
mmm1 <- function(x) {
stopifnot(!is.numeric(x))
stop("Stopped because it is not numeric.")
max(x) - min(x)
}
mmm1(TRUE)
mmm1("hello")
mmm1("hello")
mmm2 <- function(x) {
if (!is.numeric(x)) {
stop(paste("Expecting x to be numeric. You gave me "), typeof(x))
}
max(x) - min(x)
}
mmm2((numeric(0)))
mmm2(gapminder)
mmm2(gapminder$country)
mmm2(gapminder[c('lifeExp', 'gdpPercap', 'pop')])
mmm2(c(TRUE, TRUE, FALSE, TRUE, TRUE))
mmm2(x)
mmm2(x)
x <- 1:10
mmm2(x)
qd <- function(x, probs) {
stopifnot(is.numeric(x))
if (length(x) == 0) {
warning("You inputted a length-0 x. Expecting length >=1. Returning NULL.")
return(NULL)
}
qvec <- quantile(x, probs)
max(qvec) - min(qvec)
}
x <- runif(100)
qd(x, c(0.25, 0.75))
IQR(x)
qd(x, c(0.25, 0.75)) #differnce between .25 and .75 quantiles
IQR(x)
qd(x, c(0,1))
mmm2(x)
mmm2(x)
qd2 <- function(x, probs=c(0,1)) { #defailt value on probs, also same as quantile names
stopifnot(is.numeric(x))
if (length(x) == 0) {
warning("You inputted a length-0 x. Expecting length >=1. Returning NULL.")
return(NULL)
}
qvec <- quantile(x, probs)
max(qvec) - min(qvec)
}
qd2(rnorm(100))
qd2(rnorm(100), probs =c(.25, .75))
v <- c(1:10, NA)
qd(v)
qd2(v)
?ellipses
?ellipses
?ellipses
qd2(v, probs=c(0,1), na.rm=TRUE, type=1) #going to assume youre talking about the 2nd argument... it'll match 1 up with the 4th argument (ellipses)
qd2(v, probs=c(0,1), na.rm=TRUE, type=1) #going to assume youre talking about the 2nd argument... it'll match 1 up with the 4th argument (ellipses)
v <- rnorm(100)
qd2(v, probs=c(0,1), na.rm=TRUE, type=1) #going to assume youre talking about the 2nd argument... it'll match 1 up with the 4th argument (ellipses)
qd2 <- function(x, probs=c(0,1), na.rm=FALSE, ...) { #... whatever goes there, will be taken and put into the quantile function below
stopifnot(is.numeric(x))
if (length(x) == 0) {
warning("You inputted a length-0 x. Expecting length >=1. Returning NULL.")
return(NULL)
}
qvec <- quantile(x, probs, na.rm = na.rm, ...)
max(qvec) - min(qvec)
}
v <- rnorm(100)
qd2(v, probs=c(0,1), na.rm=TRUE, type=1) #going to assume youre talking about the 2nd argument... it'll match 1 up with the 4th argument (ellipses)
fox <- str_subset(sentences, pattern="fox")
suppressPackageStartupMessages(library(tidyverse))
library(gapminder)
library(testthat)
fox <- str_subset(sentences, pattern="fox")
fox <- str_subset(sentences, pattern="fox")
fox <- str_subset(sentences, pattern="fox")
install.packages(testthat)
install.packages("testthat")
suppressPackageStartupMessages(library(tidyverse))
library(gapminder)
library(testthat)
fox <- str_subset(sentences, pattern="fox")
fox <- str_subset(sentences, pattern="fox")
fox <- str_subset(sentences, pattern="fox")
str_split(fox, pattern=" ")
suppressPackageStartupMessages(library(tidyverse))
library(gapminder)
library(testthat)
str_split(fox, pattern=" ")
fox <- str_subset(sentences, pattern="fox")
fox
str_split(sentences, pattern=" ") %>% head()
str_split(fox, pattern=" ")[[1]] %>% length()
fox %>%
str_split(" ") %>%
FILL_THIS_IN
fox %>%
str_split(" ") %>%
`[[`(1) %>%
table()
fox %>%
str_split(" ") %>%
`[[`(1) %>%
table()
fox %>%
str_split("") %>%
`[[`(1) %>%
str_to_lower() %>%
table()
tibble(fruit)
tibble(fruit) %>%
separate(fruit, into = c("pre", "post"), sep = " ")
fox %>%
str_replace(pattern="fox", replacement="giraffe") #everywhere the word fox appears I want to replace it
fruit %>% head
fruit %>%
str_pad(width=7, side="right", pad="$") %>%
head()
str_length(fruit)
length(fruit)
str_c(words[1:4], words[5:8], sep=" & ")
str_c(words[3:4], words[5:8], sep=" & ")
str_c(words[3:4], words[5:8], sep=" & ", collapse=", ")
str_c(words[3:4], words[5:8], sep=" & ")
str_c(words[3:4], words[5:8], sep=" & ", collapse=", ")
fruit_df <- tibble(
fruit1 = fruit[1:4],
fruit2 = fruit[5:8]
)
fruit_df %>%
unite("flavor_combo", fruit1, fruit2, sep = " & ")
(num <- str_pad(1:12, width=2, side="left", pad="0"))
(folders <- str_c(num))
(folders <- str_c("/cm1", num))
(files <- str_c(folders, "README.md"))
contents <- str_c("# Participation\n\n Participation for class meetings", 1:12)
contents <- str_c("# Participation\n\n Participation for class meetings", 1:12)
contents
str_subset(countries, pattern = "i.a")
library(gapminder)
str_subset(countries, pattern = "i.a")
library(gapminder)
str_subset(countries, pattern = "i.a")
str_view_all(countries, pattern = "i.a")
library(gapminder)
gapminder %>%
str_subset(countries, pattern = "i.a")
str_view_all(countries, patter="a.a.a", match=TRUE)
countries <- levels(gapminder$country)
gapminder %>%
str_subset(countries, pattern = "i.a")
str_subset(countries, pattern = "i.a")
str_view_all(countries, pattern = "i.a")
str_view_all(countries, pattern = "i.a", match=TRUE)
str_view_all(countries, patter="a.a.a", match=TRUE)
str_subset(countries, pattern = "i.a")
str_view_all(countries, patter="a.a.a", match=TRUE)
str_subset(countries, pattern = "i.a")
str_view_all_match(countries, pattern = "\\.")
str_view_all_match(countries, pattern = "\\.")
str_view_all_match(countries, pattern = "\\.")
str_view_all_match(countries, pattern = "\\.")
str_view_all_match(countries, pattern = "\\.")
str_view_all_match(countries, pattern = "\\.")
str_view_all_match(countries, pattern = "\\.")
str_view_all_match(countries, pattern = "[^aeiou]")
str_view_all_match(countries, pattern = "[^aeiou]")
str_view_all_match(countries, pattern = "[^aeiou][^aeiou][^aeiou]")
c("bear", "beer", "bar") %>%
str_view_all_match(pattern = "be(e|a)r")
str_view_all(countries, patter="a.a.a", match=TRUE)
str_subset(countries, pattern = "i.a")
str_view_all_match <- function(countries, pattern) {
str_view_all(countries, pattern, match=TRUE)
}
str_view_all_match(countries, pattern = "i.a")
str_view_all_match(countries, pattern = "\\.")
str_view_all_match(countries, pattern = "[^aeiou][^aeiou][^aeiou]")
c("bear", "beer", "bar") %>%
str_view_all_match(pattern = "be(e|a)r")
str_view_all_match(countries, "re+")
str_view_all_match(countries, "ro+")
str_view_all_match(countries, "e{2}")
str_view_all_match(countries, pattern="(a|e)(a|e)")
str_view_all_match(countries, pattern="(a|e){2}")
str_view_all_match(countries, pattern = "land$")
str_view_all_match(countries, pattern = "$")
str_view_all_match(countries, pattern = "land$")
str_view_all_match(countries, pattern = "$")
str_view_all_match(countries, pattern = "^Ca")
str_view_all_match(countries, "^[^aeiouAEIOU]*$")
str_view_all(c("abad", "abbd"), pattern="(a)(b)\\1")
str_view_all(c("abad", "abbd"), pattern="(a)(b)\\2")
str_view_all(c("bananas"), "(.)(.)\\1\\2.*\\1\\2")
library(tidyverse)
library(readr)
TRT_R_GrOWTH <- read_csv("~/Desktop/Desktop2/KATIE MSC/TRT_R_GrOWTH.csv",
col_types = cols(X3 = col_skip()))
View(TRT_R_GrOWTH)
view(TRT_R_GrOWTH)
View(TRT_R_GrOWTH)
summary(TRT_R_GrOWTH)
plot(TRT_R_GrOWTH)
head(TRT_R_GrOWTH)
TRT_R_GrOWTH %>%
ggplot(aes(TRT, Growth)) + geom_boxplot() + geom_point() + theme_classic()
TRT_R_GrOWTH %>%
ggplot(aes(TRT, Growth)) + violin_plot() + geom_point() + theme_classic()
View(TRT_R_GrOWTH)
summary(TRT_R_GrOWTH)
plot(TRT_R_GrOWTH)
TRT_R_GrOWTH %>%
ggplot(aes(TRT, Growth)) + geom_violin() + geom_point() + theme_classic()
TRT_R_GrOWTH %>%
ggplot(aes(TRT, Growth)) + geom_violin() + geom_point() + geom_scatter() theme_classic()
TRT_R_GrOWTH %>%
ggplot(aes(TRT, Growth)) + geom_violin() + geom_point() + geom_scatter() + theme_classic()
TRT_R_GrOWTH %>%
ggplot(aes(TRT, Growth)) + geom_violin() + geom_point() + geom_jitter() + theme_classic()
TRT_R_GrOWTH %>%
ggplot(aes(TRT, Growth)) + geom_boxplot() + geom_point() + theme_classic()
TRT_R_GrOWTH %>%
ggplot(aes(TRT, Growth), colour=TRT) + geom_boxplot() + geom_point() + theme_classic()
TRT_R_GrOWTH %>%
ggplot(aes(TRT, Growth), colour=TRT) + geom_boxplot() + geom_point() + theme_classic()
TRT_R_GrOWTH %>%
ggplot(aes(TRT, Growth)) + geom_boxplot() + geom_point(colour=TRT) + theme_classic()
TRT_R_GrOWTH %>%
ggplot(aes(TRT, Growth)) + geom_boxplot() + geom_point() + theme_classic()
TRT_R_GrOWTH %>%
ggplot(aes(TRT, Growth)) + geom_boxplot() + geom_point() + theme_classic()
TRT_R_GrOWTH %>%
ggplot(aes(TRT, Growth)) + geom_boxplot() + geom_point() + theme_classic()
TRT_R_GrOWTH <- read.csv("~/Desktop/Desktop2/KATIE MSC/TRT_R_GrOWTH.csv")
View(TRT_R_GrOWTH)
TRT_R_GrOWTH %>%
ggplot(aes(TRT, Growth)) + geom_boxplot() + geom_point() + theme_classic()
TRT_R_GrOWTH %>%
ggplot(aes(TRT, Growth)) + geom_boxplot() + geom_point() + theme_classic()
TRT_R_GrOWTH %>%
ggplot(aes(TRT, Growth)) + geom_boxplot() + geom_point() + theme_classic()
LP_Growth <- read.csv("~/Documents/LP_Growth.csv")
View(LP_Growth)
view(LP_Growth)
summary(LP_Growth)
LP_Growth %>%
ggplot(aes(TRT, Growth)) + geom_boxplot() + geom_point() + theme_classic()
LP_Growth %>%
ggplot(aes(Treatment, Growth)) + geom_boxplot() + geom_point() + theme_classic()
LP_Growth %>%
ggplot(aes(Treatment, Growth)) + geom_boxplot() + geom_point() + theme_classic()
knitr::opts_chunk$set(echo = TRUE)
#aid in package development
install.packages("devtools")
library(shiny)
bcl <- read.csv("bcl-data.csv", stringsAsFactors = FALSE)
library(shiny)
bcl <- read.csv("bcl.csv", stringsAsFactors = FALSE)
runApp('cm107/bcl.R')
runApp('cm107/bcl.R')
runApp('cm107/bcl.R')
runApp('cm107')
runApp('cm107')
runApp('cm107')
get()
getwd()
runApp('cm107')
runApp('cm107')
runApp('cm107')
runApp('cm107')
bcl <- read.csv("./cm107/bcl_data.csv.", stringsAsFactors = FALSE)
bcl <- read.csv("~/cm107/bcl_data.csv.", stringsAsFactors = FALSE)
bcl <- read.csv("~/cm107/bcl_data.csv", stringsAsFactors = FALSE)
bcl <- read.csv("~Users/KatieZinn_Participation/cm107/bcl_data.csv", stringsAsFactors = FALSE)
bcl <- read.csv("bcl_data.csv", stringsAsFactors = FALSE)
runApp('cm107')
runApp('cm107')
runApp('cm107')
